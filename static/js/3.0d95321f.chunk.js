/*! For license information please see 3.0d95321f.chunk.js.LICENSE.txt */
(this.webpackJsonparkareact=this.webpackJsonparkareact||[]).push([[3],{60:function(b,l,G){"use strict";G.r(l),function(b,d,c){var Z=G(3),X=G(2),u=G(0),m=G.n(u),L=G(59),s=(G(1),"[object process]"===Object.prototype.toString.call("undefined"!=typeof b?b:0)),p=s&&"function"==typeof d.require?d.require:null,a=function(b){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,G=arguments.length>2&&void 0!==arguments[2]&&arguments[2],d=s?function(b,l){return c.from(b,"base64").toString(l?"utf16":"utf8")}(b,G):function(b,l){var G=atob(b);if(l){var d=new Uint8Array(G.length);return Array.prototype.forEach.call(d,(function(b,l,d){d[l]=G.charCodeAt(l)})),String.fromCharCode.apply(null,new Uint16Array(d.buffer))}return G}(b,G),Z=d.indexOf("\n",10)+1,X=d.substring(Z)+(l?"//# sourceMappingURL="+l:"");if(p){var u=p("worker_threads").Worker;return function(b){return new u(X,Object.assign({},b,{eval:!0}))}}var m=new Blob([X],{type:"application/javascript"}),L=URL.createObjectURL(m);return function(b){return new Worker(L,b)}}("",null,!1);l.default=function(b){var l=b.children,G=b.step,d=void 0===G?1/60:G,c=b.gravity,s=void 0===c?[0,-10,0]:c,p=b.tolerance,h=void 0===p?.001:p,W=b.iterations,y=void 0===W?5:W,n=b.allowSleep,V=void 0===n||n,x=b.broadphase,o=void 0===x?"Naive":x,Y=b.axisIndex,t=void 0===Y?0:Y,R=b.defaultContactMaterial,S=void 0===R?{contactEquationStiffness:1e6}:R,K=b.size,z=void 0===K?1e3:K,i=Object(u.useState)((function(){return new a})),k=Object(X.a)(i,1)[0],e=Object(u.useState)({}),N=Object(X.a)(e,1)[0],C=Object(u.useState)({}),H=Object(X.a)(C,1)[0],M=Object(u.useState)((function(){return{positions:new Float32Array(3*z),quaternions:new Float32Array(4*z)}})),v=Object(X.a)(M,1)[0],F=Object(u.useRef)({});Object(u.useEffect)((function(){function b(){k.postMessage(Object(L.b)({op:"step"},v),[v.positions.buffer,v.quaternions.buffer])}return k.postMessage({op:"init",props:{gravity:s,tolerance:h,step:d,iterations:y,broadphase:o,allowSleep:V,axisIndex:t,defaultContactMaterial:S}}),k.onmessage=function(l){switch(l.data.op){case"frame":v.positions=l.data.positions,v.quaternions=l.data.quaternions,requestAnimationFrame(b);break;case"sync":F.current=l.data.bodies.reduce((function(b,G){return Object(L.b)({},b,Object(Z.a)({},G,l.data.bodies.indexOf(G)))}),{});break;case"event":switch(l.data.type){case"collide":N[l.data.body](Object(L.b)({},l.data,{body:H[l.data.body],target:H[l.data.target]}))}}},b(),function(){return k.terminate()}}),[]);var J=Object(u.useMemo)((function(){return{worker:k,bodies:F,buffers:v,refs:H,events:N}}),[k,F,v,N,H]);return m.a.createElement(L.d.Provider,{value:J},l)}}.call(this,G(46),G(47)(b),G(62).Buffer)},62:function(b,l,G){"use strict";(function(b){var d=G(64),c=G(65),Z=G(66);function X(){return m.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(b,l){if(X()<l)throw new RangeError("Invalid typed array length");return m.TYPED_ARRAY_SUPPORT?(b=new Uint8Array(l)).__proto__=m.prototype:(null===b&&(b=new m(l)),b.length=l),b}function m(b,l,G){if(!m.TYPED_ARRAY_SUPPORT&&!(this instanceof m))return new m(b,l,G);if("number"===typeof b){if("string"===typeof l)throw new Error("If encoding is specified then the first argument must be a string");return p(this,b)}return L(this,b,l,G)}function L(b,l,G,d){if("number"===typeof l)throw new TypeError('"value" argument must not be a number');return"undefined"!==typeof ArrayBuffer&&l instanceof ArrayBuffer?function(b,l,G,d){if(l.byteLength,G<0||l.byteLength<G)throw new RangeError("'offset' is out of bounds");if(l.byteLength<G+(d||0))throw new RangeError("'length' is out of bounds");l=void 0===G&&void 0===d?new Uint8Array(l):void 0===d?new Uint8Array(l,G):new Uint8Array(l,G,d);m.TYPED_ARRAY_SUPPORT?(b=l).__proto__=m.prototype:b=a(b,l);return b}(b,l,G,d):"string"===typeof l?function(b,l,G){"string"===typeof G&&""!==G||(G="utf8");if(!m.isEncoding(G))throw new TypeError('"encoding" must be a valid string encoding');var d=0|W(l,G),c=(b=u(b,d)).write(l,G);c!==d&&(b=b.slice(0,c));return b}(b,l,G):function(b,l){if(m.isBuffer(l)){var G=0|h(l.length);return 0===(b=u(b,G)).length||l.copy(b,0,0,G),b}if(l){if("undefined"!==typeof ArrayBuffer&&l.buffer instanceof ArrayBuffer||"length"in l)return"number"!==typeof l.length||(d=l.length)!==d?u(b,0):a(b,l);if("Buffer"===l.type&&Z(l.data))return a(b,l.data)}var d;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(b,l)}function s(b){if("number"!==typeof b)throw new TypeError('"size" argument must be a number');if(b<0)throw new RangeError('"size" argument must not be negative')}function p(b,l){if(s(l),b=u(b,l<0?0:0|h(l)),!m.TYPED_ARRAY_SUPPORT)for(var G=0;G<l;++G)b[G]=0;return b}function a(b,l){var G=l.length<0?0:0|h(l.length);b=u(b,G);for(var d=0;d<G;d+=1)b[d]=255&l[d];return b}function h(b){if(b>=X())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+X().toString(16)+" bytes");return 0|b}function W(b,l){if(m.isBuffer(b))return b.length;if("undefined"!==typeof ArrayBuffer&&"function"===typeof ArrayBuffer.isView&&(ArrayBuffer.isView(b)||b instanceof ArrayBuffer))return b.byteLength;"string"!==typeof b&&(b=""+b);var G=b.length;if(0===G)return 0;for(var d=!1;;)switch(l){case"ascii":case"latin1":case"binary":return G;case"utf8":case"utf-8":case void 0:return I(b).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*G;case"hex":return G>>>1;case"base64":return r(b).length;default:if(d)return I(b).length;l=(""+l).toLowerCase(),d=!0}}function y(b,l,G){var d=!1;if((void 0===l||l<0)&&(l=0),l>this.length)return"";if((void 0===G||G>this.length)&&(G=this.length),G<=0)return"";if((G>>>=0)<=(l>>>=0))return"";for(b||(b="utf8");;)switch(b){case"hex":return N(this,l,G);case"utf8":case"utf-8":return i(this,l,G);case"ascii":return k(this,l,G);case"latin1":case"binary":return e(this,l,G);case"base64":return z(this,l,G);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,l,G);default:if(d)throw new TypeError("Unknown encoding: "+b);b=(b+"").toLowerCase(),d=!0}}function n(b,l,G){var d=b[l];b[l]=b[G],b[G]=d}function V(b,l,G,d,c){if(0===b.length)return-1;if("string"===typeof G?(d=G,G=0):G>2147483647?G=2147483647:G<-2147483648&&(G=-2147483648),G=+G,isNaN(G)&&(G=c?0:b.length-1),G<0&&(G=b.length+G),G>=b.length){if(c)return-1;G=b.length-1}else if(G<0){if(!c)return-1;G=0}if("string"===typeof l&&(l=m.from(l,d)),m.isBuffer(l))return 0===l.length?-1:x(b,l,G,d,c);if("number"===typeof l)return l&=255,m.TYPED_ARRAY_SUPPORT&&"function"===typeof Uint8Array.prototype.indexOf?c?Uint8Array.prototype.indexOf.call(b,l,G):Uint8Array.prototype.lastIndexOf.call(b,l,G):x(b,[l],G,d,c);throw new TypeError("val must be string, number or Buffer")}function x(b,l,G,d,c){var Z,X=1,u=b.length,m=l.length;if(void 0!==d&&("ucs2"===(d=String(d).toLowerCase())||"ucs-2"===d||"utf16le"===d||"utf-16le"===d)){if(b.length<2||l.length<2)return-1;X=2,u/=2,m/=2,G/=2}function L(b,l){return 1===X?b[l]:b.readUInt16BE(l*X)}if(c){var s=-1;for(Z=G;Z<u;Z++)if(L(b,Z)===L(l,-1===s?0:Z-s)){if(-1===s&&(s=Z),Z-s+1===m)return s*X}else-1!==s&&(Z-=Z-s),s=-1}else for(G+m>u&&(G=u-m),Z=G;Z>=0;Z--){for(var p=!0,a=0;a<m;a++)if(L(b,Z+a)!==L(l,a)){p=!1;break}if(p)return Z}return-1}function o(b,l,G,d){G=Number(G)||0;var c=b.length-G;d?(d=Number(d))>c&&(d=c):d=c;var Z=l.length;if(Z%2!==0)throw new TypeError("Invalid hex string");d>Z/2&&(d=Z/2);for(var X=0;X<d;++X){var u=parseInt(l.substr(2*X,2),16);if(isNaN(u))return X;b[G+X]=u}return X}function Y(b,l,G,d){return w(I(l,b.length-G),b,G,d)}function t(b,l,G,d){return w(function(b){for(var l=[],G=0;G<b.length;++G)l.push(255&b.charCodeAt(G));return l}(l),b,G,d)}function R(b,l,G,d){return t(b,l,G,d)}function S(b,l,G,d){return w(r(l),b,G,d)}function K(b,l,G,d){return w(function(b,l){for(var G,d,c,Z=[],X=0;X<b.length&&!((l-=2)<0);++X)G=b.charCodeAt(X),d=G>>8,c=G%256,Z.push(c),Z.push(d);return Z}(l,b.length-G),b,G,d)}function z(b,l,G){return 0===l&&G===b.length?d.fromByteArray(b):d.fromByteArray(b.slice(l,G))}function i(b,l,G){G=Math.min(b.length,G);for(var d=[],c=l;c<G;){var Z,X,u,m,L=b[c],s=null,p=L>239?4:L>223?3:L>191?2:1;if(c+p<=G)switch(p){case 1:L<128&&(s=L);break;case 2:128===(192&(Z=b[c+1]))&&(m=(31&L)<<6|63&Z)>127&&(s=m);break;case 3:Z=b[c+1],X=b[c+2],128===(192&Z)&&128===(192&X)&&(m=(15&L)<<12|(63&Z)<<6|63&X)>2047&&(m<55296||m>57343)&&(s=m);break;case 4:Z=b[c+1],X=b[c+2],u=b[c+3],128===(192&Z)&&128===(192&X)&&128===(192&u)&&(m=(15&L)<<18|(63&Z)<<12|(63&X)<<6|63&u)>65535&&m<1114112&&(s=m)}null===s?(s=65533,p=1):s>65535&&(s-=65536,d.push(s>>>10&1023|55296),s=56320|1023&s),d.push(s),c+=p}return function(b){var l=b.length;if(l<=4096)return String.fromCharCode.apply(String,b);var G="",d=0;for(;d<l;)G+=String.fromCharCode.apply(String,b.slice(d,d+=4096));return G}(d)}l.Buffer=m,l.SlowBuffer=function(b){+b!=b&&(b=0);return m.alloc(+b)},l.INSPECT_MAX_BYTES=50,m.TYPED_ARRAY_SUPPORT=void 0!==b.TYPED_ARRAY_SUPPORT?b.TYPED_ARRAY_SUPPORT:function(){try{var b=new Uint8Array(1);return b.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===b.foo()&&"function"===typeof b.subarray&&0===b.subarray(1,1).byteLength}catch(l){return!1}}(),l.kMaxLength=X(),m.poolSize=8192,m._augment=function(b){return b.__proto__=m.prototype,b},m.from=function(b,l,G){return L(null,b,l,G)},m.TYPED_ARRAY_SUPPORT&&(m.prototype.__proto__=Uint8Array.prototype,m.__proto__=Uint8Array,"undefined"!==typeof Symbol&&Symbol.species&&m[Symbol.species]===m&&Object.defineProperty(m,Symbol.species,{value:null,configurable:!0})),m.alloc=function(b,l,G){return function(b,l,G,d){return s(l),l<=0?u(b,l):void 0!==G?"string"===typeof d?u(b,l).fill(G,d):u(b,l).fill(G):u(b,l)}(null,b,l,G)},m.allocUnsafe=function(b){return p(null,b)},m.allocUnsafeSlow=function(b){return p(null,b)},m.isBuffer=function(b){return!(null==b||!b._isBuffer)},m.compare=function(b,l){if(!m.isBuffer(b)||!m.isBuffer(l))throw new TypeError("Arguments must be Buffers");if(b===l)return 0;for(var G=b.length,d=l.length,c=0,Z=Math.min(G,d);c<Z;++c)if(b[c]!==l[c]){G=b[c],d=l[c];break}return G<d?-1:d<G?1:0},m.isEncoding=function(b){switch(String(b).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},m.concat=function(b,l){if(!Z(b))throw new TypeError('"list" argument must be an Array of Buffers');if(0===b.length)return m.alloc(0);var G;if(void 0===l)for(l=0,G=0;G<b.length;++G)l+=b[G].length;var d=m.allocUnsafe(l),c=0;for(G=0;G<b.length;++G){var X=b[G];if(!m.isBuffer(X))throw new TypeError('"list" argument must be an Array of Buffers');X.copy(d,c),c+=X.length}return d},m.byteLength=W,m.prototype._isBuffer=!0,m.prototype.swap16=function(){var b=this.length;if(b%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var l=0;l<b;l+=2)n(this,l,l+1);return this},m.prototype.swap32=function(){var b=this.length;if(b%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var l=0;l<b;l+=4)n(this,l,l+3),n(this,l+1,l+2);return this},m.prototype.swap64=function(){var b=this.length;if(b%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var l=0;l<b;l+=8)n(this,l,l+7),n(this,l+1,l+6),n(this,l+2,l+5),n(this,l+3,l+4);return this},m.prototype.toString=function(){var b=0|this.length;return 0===b?"":0===arguments.length?i(this,0,b):y.apply(this,arguments)},m.prototype.equals=function(b){if(!m.isBuffer(b))throw new TypeError("Argument must be a Buffer");return this===b||0===m.compare(this,b)},m.prototype.inspect=function(){var b="",G=l.INSPECT_MAX_BYTES;return this.length>0&&(b=this.toString("hex",0,G).match(/.{2}/g).join(" "),this.length>G&&(b+=" ... ")),"<Buffer "+b+">"},m.prototype.compare=function(b,l,G,d,c){if(!m.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(void 0===l&&(l=0),void 0===G&&(G=b?b.length:0),void 0===d&&(d=0),void 0===c&&(c=this.length),l<0||G>b.length||d<0||c>this.length)throw new RangeError("out of range index");if(d>=c&&l>=G)return 0;if(d>=c)return-1;if(l>=G)return 1;if(this===b)return 0;for(var Z=(c>>>=0)-(d>>>=0),X=(G>>>=0)-(l>>>=0),u=Math.min(Z,X),L=this.slice(d,c),s=b.slice(l,G),p=0;p<u;++p)if(L[p]!==s[p]){Z=L[p],X=s[p];break}return Z<X?-1:X<Z?1:0},m.prototype.includes=function(b,l,G){return-1!==this.indexOf(b,l,G)},m.prototype.indexOf=function(b,l,G){return V(this,b,l,G,!0)},m.prototype.lastIndexOf=function(b,l,G){return V(this,b,l,G,!1)},m.prototype.write=function(b,l,G,d){if(void 0===l)d="utf8",G=this.length,l=0;else if(void 0===G&&"string"===typeof l)d=l,G=this.length,l=0;else{if(!isFinite(l))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");l|=0,isFinite(G)?(G|=0,void 0===d&&(d="utf8")):(d=G,G=void 0)}var c=this.length-l;if((void 0===G||G>c)&&(G=c),b.length>0&&(G<0||l<0)||l>this.length)throw new RangeError("Attempt to write outside buffer bounds");d||(d="utf8");for(var Z=!1;;)switch(d){case"hex":return o(this,b,l,G);case"utf8":case"utf-8":return Y(this,b,l,G);case"ascii":return t(this,b,l,G);case"latin1":case"binary":return R(this,b,l,G);case"base64":return S(this,b,l,G);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return K(this,b,l,G);default:if(Z)throw new TypeError("Unknown encoding: "+d);d=(""+d).toLowerCase(),Z=!0}},m.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(b,l,G){var d="";G=Math.min(b.length,G);for(var c=l;c<G;++c)d+=String.fromCharCode(127&b[c]);return d}function e(b,l,G){var d="";G=Math.min(b.length,G);for(var c=l;c<G;++c)d+=String.fromCharCode(b[c]);return d}function N(b,l,G){var d=b.length;(!l||l<0)&&(l=0),(!G||G<0||G>d)&&(G=d);for(var c="",Z=l;Z<G;++Z)c+=P(b[Z]);return c}function C(b,l,G){for(var d=b.slice(l,G),c="",Z=0;Z<d.length;Z+=2)c+=String.fromCharCode(d[Z]+256*d[Z+1]);return c}function H(b,l,G){if(b%1!==0||b<0)throw new RangeError("offset is not uint");if(b+l>G)throw new RangeError("Trying to access beyond buffer length")}function M(b,l,G,d,c,Z){if(!m.isBuffer(b))throw new TypeError('"buffer" argument must be a Buffer instance');if(l>c||l<Z)throw new RangeError('"value" argument is out of bounds');if(G+d>b.length)throw new RangeError("Index out of range")}function v(b,l,G,d){l<0&&(l=65535+l+1);for(var c=0,Z=Math.min(b.length-G,2);c<Z;++c)b[G+c]=(l&255<<8*(d?c:1-c))>>>8*(d?c:1-c)}function F(b,l,G,d){l<0&&(l=4294967295+l+1);for(var c=0,Z=Math.min(b.length-G,4);c<Z;++c)b[G+c]=l>>>8*(d?c:3-c)&255}function J(b,l,G,d,c,Z){if(G+d>b.length)throw new RangeError("Index out of range");if(G<0)throw new RangeError("Index out of range")}function Q(b,l,G,d,Z){return Z||J(b,0,G,4),c.write(b,l,G,d,23,4),G+4}function U(b,l,G,d,Z){return Z||J(b,0,G,8),c.write(b,l,G,d,52,8),G+8}m.prototype.slice=function(b,l){var G,d=this.length;if((b=~~b)<0?(b+=d)<0&&(b=0):b>d&&(b=d),(l=void 0===l?d:~~l)<0?(l+=d)<0&&(l=0):l>d&&(l=d),l<b&&(l=b),m.TYPED_ARRAY_SUPPORT)(G=this.subarray(b,l)).__proto__=m.prototype;else{var c=l-b;G=new m(c,void 0);for(var Z=0;Z<c;++Z)G[Z]=this[Z+b]}return G},m.prototype.readUIntLE=function(b,l,G){b|=0,l|=0,G||H(b,l,this.length);for(var d=this[b],c=1,Z=0;++Z<l&&(c*=256);)d+=this[b+Z]*c;return d},m.prototype.readUIntBE=function(b,l,G){b|=0,l|=0,G||H(b,l,this.length);for(var d=this[b+--l],c=1;l>0&&(c*=256);)d+=this[b+--l]*c;return d},m.prototype.readUInt8=function(b,l){return l||H(b,1,this.length),this[b]},m.prototype.readUInt16LE=function(b,l){return l||H(b,2,this.length),this[b]|this[b+1]<<8},m.prototype.readUInt16BE=function(b,l){return l||H(b,2,this.length),this[b]<<8|this[b+1]},m.prototype.readUInt32LE=function(b,l){return l||H(b,4,this.length),(this[b]|this[b+1]<<8|this[b+2]<<16)+16777216*this[b+3]},m.prototype.readUInt32BE=function(b,l){return l||H(b,4,this.length),16777216*this[b]+(this[b+1]<<16|this[b+2]<<8|this[b+3])},m.prototype.readIntLE=function(b,l,G){b|=0,l|=0,G||H(b,l,this.length);for(var d=this[b],c=1,Z=0;++Z<l&&(c*=256);)d+=this[b+Z]*c;return d>=(c*=128)&&(d-=Math.pow(2,8*l)),d},m.prototype.readIntBE=function(b,l,G){b|=0,l|=0,G||H(b,l,this.length);for(var d=l,c=1,Z=this[b+--d];d>0&&(c*=256);)Z+=this[b+--d]*c;return Z>=(c*=128)&&(Z-=Math.pow(2,8*l)),Z},m.prototype.readInt8=function(b,l){return l||H(b,1,this.length),128&this[b]?-1*(255-this[b]+1):this[b]},m.prototype.readInt16LE=function(b,l){l||H(b,2,this.length);var G=this[b]|this[b+1]<<8;return 32768&G?4294901760|G:G},m.prototype.readInt16BE=function(b,l){l||H(b,2,this.length);var G=this[b+1]|this[b]<<8;return 32768&G?4294901760|G:G},m.prototype.readInt32LE=function(b,l){return l||H(b,4,this.length),this[b]|this[b+1]<<8|this[b+2]<<16|this[b+3]<<24},m.prototype.readInt32BE=function(b,l){return l||H(b,4,this.length),this[b]<<24|this[b+1]<<16|this[b+2]<<8|this[b+3]},m.prototype.readFloatLE=function(b,l){return l||H(b,4,this.length),c.read(this,b,!0,23,4)},m.prototype.readFloatBE=function(b,l){return l||H(b,4,this.length),c.read(this,b,!1,23,4)},m.prototype.readDoubleLE=function(b,l){return l||H(b,8,this.length),c.read(this,b,!0,52,8)},m.prototype.readDoubleBE=function(b,l){return l||H(b,8,this.length),c.read(this,b,!1,52,8)},m.prototype.writeUIntLE=function(b,l,G,d){(b=+b,l|=0,G|=0,d)||M(this,b,l,G,Math.pow(2,8*G)-1,0);var c=1,Z=0;for(this[l]=255&b;++Z<G&&(c*=256);)this[l+Z]=b/c&255;return l+G},m.prototype.writeUIntBE=function(b,l,G,d){(b=+b,l|=0,G|=0,d)||M(this,b,l,G,Math.pow(2,8*G)-1,0);var c=G-1,Z=1;for(this[l+c]=255&b;--c>=0&&(Z*=256);)this[l+c]=b/Z&255;return l+G},m.prototype.writeUInt8=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,1,255,0),m.TYPED_ARRAY_SUPPORT||(b=Math.floor(b)),this[l]=255&b,l+1},m.prototype.writeUInt16LE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,2,65535,0),m.TYPED_ARRAY_SUPPORT?(this[l]=255&b,this[l+1]=b>>>8):v(this,b,l,!0),l+2},m.prototype.writeUInt16BE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,2,65535,0),m.TYPED_ARRAY_SUPPORT?(this[l]=b>>>8,this[l+1]=255&b):v(this,b,l,!1),l+2},m.prototype.writeUInt32LE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,4,4294967295,0),m.TYPED_ARRAY_SUPPORT?(this[l+3]=b>>>24,this[l+2]=b>>>16,this[l+1]=b>>>8,this[l]=255&b):F(this,b,l,!0),l+4},m.prototype.writeUInt32BE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,4,4294967295,0),m.TYPED_ARRAY_SUPPORT?(this[l]=b>>>24,this[l+1]=b>>>16,this[l+2]=b>>>8,this[l+3]=255&b):F(this,b,l,!1),l+4},m.prototype.writeIntLE=function(b,l,G,d){if(b=+b,l|=0,!d){var c=Math.pow(2,8*G-1);M(this,b,l,G,c-1,-c)}var Z=0,X=1,u=0;for(this[l]=255&b;++Z<G&&(X*=256);)b<0&&0===u&&0!==this[l+Z-1]&&(u=1),this[l+Z]=(b/X>>0)-u&255;return l+G},m.prototype.writeIntBE=function(b,l,G,d){if(b=+b,l|=0,!d){var c=Math.pow(2,8*G-1);M(this,b,l,G,c-1,-c)}var Z=G-1,X=1,u=0;for(this[l+Z]=255&b;--Z>=0&&(X*=256);)b<0&&0===u&&0!==this[l+Z+1]&&(u=1),this[l+Z]=(b/X>>0)-u&255;return l+G},m.prototype.writeInt8=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,1,127,-128),m.TYPED_ARRAY_SUPPORT||(b=Math.floor(b)),b<0&&(b=255+b+1),this[l]=255&b,l+1},m.prototype.writeInt16LE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,2,32767,-32768),m.TYPED_ARRAY_SUPPORT?(this[l]=255&b,this[l+1]=b>>>8):v(this,b,l,!0),l+2},m.prototype.writeInt16BE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,2,32767,-32768),m.TYPED_ARRAY_SUPPORT?(this[l]=b>>>8,this[l+1]=255&b):v(this,b,l,!1),l+2},m.prototype.writeInt32LE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,4,2147483647,-2147483648),m.TYPED_ARRAY_SUPPORT?(this[l]=255&b,this[l+1]=b>>>8,this[l+2]=b>>>16,this[l+3]=b>>>24):F(this,b,l,!0),l+4},m.prototype.writeInt32BE=function(b,l,G){return b=+b,l|=0,G||M(this,b,l,4,2147483647,-2147483648),b<0&&(b=4294967295+b+1),m.TYPED_ARRAY_SUPPORT?(this[l]=b>>>24,this[l+1]=b>>>16,this[l+2]=b>>>8,this[l+3]=255&b):F(this,b,l,!1),l+4},m.prototype.writeFloatLE=function(b,l,G){return Q(this,b,l,!0,G)},m.prototype.writeFloatBE=function(b,l,G){return Q(this,b,l,!1,G)},m.prototype.writeDoubleLE=function(b,l,G){return U(this,b,l,!0,G)},m.prototype.writeDoubleBE=function(b,l,G){return U(this,b,l,!1,G)},m.prototype.copy=function(b,l,G,d){if(G||(G=0),d||0===d||(d=this.length),l>=b.length&&(l=b.length),l||(l=0),d>0&&d<G&&(d=G),d===G)return 0;if(0===b.length||0===this.length)return 0;if(l<0)throw new RangeError("targetStart out of bounds");if(G<0||G>=this.length)throw new RangeError("sourceStart out of bounds");if(d<0)throw new RangeError("sourceEnd out of bounds");d>this.length&&(d=this.length),b.length-l<d-G&&(d=b.length-l+G);var c,Z=d-G;if(this===b&&G<l&&l<d)for(c=Z-1;c>=0;--c)b[c+l]=this[c+G];else if(Z<1e3||!m.TYPED_ARRAY_SUPPORT)for(c=0;c<Z;++c)b[c+l]=this[c+G];else Uint8Array.prototype.set.call(b,this.subarray(G,G+Z),l);return Z},m.prototype.fill=function(b,l,G,d){if("string"===typeof b){if("string"===typeof l?(d=l,l=0,G=this.length):"string"===typeof G&&(d=G,G=this.length),1===b.length){var c=b.charCodeAt(0);c<256&&(b=c)}if(void 0!==d&&"string"!==typeof d)throw new TypeError("encoding must be a string");if("string"===typeof d&&!m.isEncoding(d))throw new TypeError("Unknown encoding: "+d)}else"number"===typeof b&&(b&=255);if(l<0||this.length<l||this.length<G)throw new RangeError("Out of range index");if(G<=l)return this;var Z;if(l>>>=0,G=void 0===G?this.length:G>>>0,b||(b=0),"number"===typeof b)for(Z=l;Z<G;++Z)this[Z]=b;else{var X=m.isBuffer(b)?b:I(new m(b,d).toString()),u=X.length;for(Z=0;Z<G-l;++Z)this[Z+l]=X[Z%u]}return this};var T=/[^+\/0-9A-Za-z-_]/g;function P(b){return b<16?"0"+b.toString(16):b.toString(16)}function I(b,l){var G;l=l||1/0;for(var d=b.length,c=null,Z=[],X=0;X<d;++X){if((G=b.charCodeAt(X))>55295&&G<57344){if(!c){if(G>56319){(l-=3)>-1&&Z.push(239,191,189);continue}if(X+1===d){(l-=3)>-1&&Z.push(239,191,189);continue}c=G;continue}if(G<56320){(l-=3)>-1&&Z.push(239,191,189),c=G;continue}G=65536+(c-55296<<10|G-56320)}else c&&(l-=3)>-1&&Z.push(239,191,189);if(c=null,G<128){if((l-=1)<0)break;Z.push(G)}else if(G<2048){if((l-=2)<0)break;Z.push(G>>6|192,63&G|128)}else if(G<65536){if((l-=3)<0)break;Z.push(G>>12|224,G>>6&63|128,63&G|128)}else{if(!(G<1114112))throw new Error("Invalid code point");if((l-=4)<0)break;Z.push(G>>18|240,G>>12&63|128,G>>6&63|128,63&G|128)}}return Z}function r(b){return d.toByteArray(function(b){if((b=function(b){return b.trim?b.trim():b.replace(/^\s+|\s+$/g,"")}(b).replace(T,"")).length<2)return"";for(;b.length%4!==0;)b+="=";return b}(b))}function w(b,l,G,d){for(var c=0;c<d&&!(c+G>=l.length||c>=b.length);++c)l[c+G]=b[c];return c}}).call(this,G(63))},63:function(b,l){var G;G=function(){return this}();try{G=G||new Function("return this")()}catch(d){"object"===typeof window&&(G=window)}b.exports=G},64:function(b,l,G){"use strict";l.byteLength=function(b){var l=L(b),G=l[0],d=l[1];return 3*(G+d)/4-d},l.toByteArray=function(b){var l,G,d=L(b),X=d[0],u=d[1],m=new Z(function(b,l,G){return 3*(l+G)/4-G}(0,X,u)),s=0,p=u>0?X-4:X;for(G=0;G<p;G+=4)l=c[b.charCodeAt(G)]<<18|c[b.charCodeAt(G+1)]<<12|c[b.charCodeAt(G+2)]<<6|c[b.charCodeAt(G+3)],m[s++]=l>>16&255,m[s++]=l>>8&255,m[s++]=255&l;2===u&&(l=c[b.charCodeAt(G)]<<2|c[b.charCodeAt(G+1)]>>4,m[s++]=255&l);1===u&&(l=c[b.charCodeAt(G)]<<10|c[b.charCodeAt(G+1)]<<4|c[b.charCodeAt(G+2)]>>2,m[s++]=l>>8&255,m[s++]=255&l);return m},l.fromByteArray=function(b){for(var l,G=b.length,c=G%3,Z=[],X=0,u=G-c;X<u;X+=16383)Z.push(s(b,X,X+16383>u?u:X+16383));1===c?(l=b[G-1],Z.push(d[l>>2]+d[l<<4&63]+"==")):2===c&&(l=(b[G-2]<<8)+b[G-1],Z.push(d[l>>10]+d[l>>4&63]+d[l<<2&63]+"="));return Z.join("")};for(var d=[],c=[],Z="undefined"!==typeof Uint8Array?Uint8Array:Array,X="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,m=X.length;u<m;++u)d[u]=X[u],c[X.charCodeAt(u)]=u;function L(b){var l=b.length;if(l%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var G=b.indexOf("=");return-1===G&&(G=l),[G,G===l?0:4-G%4]}function s(b,l,G){for(var c,Z,X=[],u=l;u<G;u+=3)c=(b[u]<<16&16711680)+(b[u+1]<<8&65280)+(255&b[u+2]),X.push(d[(Z=c)>>18&63]+d[Z>>12&63]+d[Z>>6&63]+d[63&Z]);return X.join("")}c["-".charCodeAt(0)]=62,c["_".charCodeAt(0)]=63},65:function(b,l){l.read=function(b,l,G,d,c){var Z,X,u=8*c-d-1,m=(1<<u)-1,L=m>>1,s=-7,p=G?c-1:0,a=G?-1:1,h=b[l+p];for(p+=a,Z=h&(1<<-s)-1,h>>=-s,s+=u;s>0;Z=256*Z+b[l+p],p+=a,s-=8);for(X=Z&(1<<-s)-1,Z>>=-s,s+=d;s>0;X=256*X+b[l+p],p+=a,s-=8);if(0===Z)Z=1-L;else{if(Z===m)return X?NaN:1/0*(h?-1:1);X+=Math.pow(2,d),Z-=L}return(h?-1:1)*X*Math.pow(2,Z-d)},l.write=function(b,l,G,d,c,Z){var X,u,m,L=8*Z-c-1,s=(1<<L)-1,p=s>>1,a=23===c?Math.pow(2,-24)-Math.pow(2,-77):0,h=d?0:Z-1,W=d?1:-1,y=l<0||0===l&&1/l<0?1:0;for(l=Math.abs(l),isNaN(l)||l===1/0?(u=isNaN(l)?1:0,X=s):(X=Math.floor(Math.log(l)/Math.LN2),l*(m=Math.pow(2,-X))<1&&(X--,m*=2),(l+=X+p>=1?a/m:a*Math.pow(2,1-p))*m>=2&&(X++,m/=2),X+p>=s?(u=0,X=s):X+p>=1?(u=(l*m-1)*Math.pow(2,c),X+=p):(u=l*Math.pow(2,p-1)*Math.pow(2,c),X=0));c>=8;b[G+h]=255&u,h+=W,u/=256,c-=8);for(X=X<<c|u,L+=c;L>0;b[G+h]=255&X,h+=W,X/=256,L-=8);b[G+h-W]|=128*y}},66:function(b,l){var G={}.toString;b.exports=Array.isArray||function(b){return"[object Array]"==G.call(b)}}}]);
//# sourceMappingURL=3.0d95321f.chunk.js.map