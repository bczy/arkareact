{"version":3,"sources":["../node_modules/use-cannon/dist/Provider-d2ad9f14.js","../node_modules/process/browser.js","../node_modules/buffer/index.js","../node_modules/webpack/buildin/global.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js"],"names":["m","Object","prototype","toString","call","process","L","module","require","u","b","G","d","l","Buffer","from","atob","Uint8Array","length","Array","forEach","charCodeAt","String","fromCharCode","apply","Uint16Array","buffer","Z","indexOf","c","substring","Worker","assign","eval","X","Blob","type","URL","createObjectURL","children","step","gravity","W","tolerance","p","iterations","s","allowSleep","a","broadphase","y","axisIndex","V","defaultContactMaterial","h","contactEquationStiffness","size","x","Y","K","S","positions","Float32Array","quaternions","R","z","postMessage","op","props","onmessage","data","requestAnimationFrame","current","bodies","reduce","body","target","terminate","k","worker","buffers","refs","events","createElement","Provider","value","cachedSetTimeout","cachedClearTimeout","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","i","push","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","TypeError","ArrayBuffer","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","copy","val","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","bidirectionalIndexOf","isNaN","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","typedArraySupport","poolSize","_augment","Symbol","species","defineProperty","configurable","fill","allocUnsafeSlow","_isBuffer","compare","list","pos","swap16","swap32","swap64","equals","inspect","max","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","g","Function","window","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2"],"mappings":"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","file":"static/js/3.28c2fb60.chunk.js","sourcesContent":["import b,{useState as G,useRef as d,useEffect as l,useMemo as Z}from\"react\";import{_ as c,c as X}from\"./index-1f49f84c.js\";import\"three\";import\"react-three-fiber\";const m=\"[object process]\"===Object.prototype.toString.call(\"undefined\"!=typeof process?process:0),L=m&&\"function\"==typeof module.require?module.require:null;const u=function(b,G=null,d=!1){const l=m?function(b,G){return Buffer.from(b,\"base64\").toString(G?\"utf16\":\"utf8\")}(b,d):function(b,G){const d=atob(b);if(G){const b=new Uint8Array(d.length);return Array.prototype.forEach.call(b,(b,G,l)=>{l[G]=d.charCodeAt(G)}),String.fromCharCode.apply(null,new Uint16Array(b.buffer))}return d}(b,d),Z=l.indexOf(\"\\n\",10)+1,c=l.substring(Z)+(G?\"//# sourceMappingURL=\"+G:\"\");if(L){const b=L(\"worker_threads\").Worker;return function(G){return new b(c,Object.assign({},G,{eval:!0}))}}const X=new Blob([c],{type:\"application/javascript\"}),u=URL.createObjectURL(X);return function(b){return new Worker(u,b)}}(\"\",null,!1);export default function({children:m,step:L=1/60,gravity:W=[0,-10,0],tolerance:p=.001,iterations:s=5,allowSleep:a=!0,broadphase:y=\"Naive\",axisIndex:V=0,defaultContactMaterial:h={contactEquationStiffness:1e6},size:x=1e3}){const[Y]=G(()=>new u),[K]=G({}),[S]=G({}),[R]=G(()=>({positions:new Float32Array(3*x),quaternions:new Float32Array(4*x)})),z=d({});l(()=>{function b(){Y.postMessage(c({op:\"step\"},R),[R.positions.buffer,R.quaternions.buffer])}return Y.postMessage({op:\"init\",props:{gravity:W,tolerance:p,step:L,iterations:s,broadphase:y,allowSleep:a,axisIndex:V,defaultContactMaterial:h}}),Y.onmessage=G=>{switch(G.data.op){case\"frame\":R.positions=G.data.positions,R.quaternions=G.data.quaternions,requestAnimationFrame(b);break;case\"sync\":z.current=G.data.bodies.reduce((b,d)=>c({},b,{[d]:G.data.bodies.indexOf(d)}),{});break;case\"event\":switch(G.data.type){case\"collide\":K[G.data.body](c({},G.data,{body:S[G.data.body],target:S[G.data.target]}))}}},b(),()=>Y.terminate()},[]);const k=Z(()=>({worker:Y,bodies:z,buffers:R,refs:S,events:K}),[Y,z,R,K,S]);return b.createElement(X.Provider,{value:k},m)}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n"],"sourceRoot":""}